/**********************《测试 -操作符》***********************/

// assert 1--1 // 注意: 要先声明 -- 操作符
assert - -1   == 1
assert 0 - 1  == -1
assert 1-1    == 0
assert 1 - 1  == 0
assert 1- -1  == 2
assert 1 - -1 == 2


/**********************《测试 函数声明成中缀操作符》***********************/

// 函数声明成中缀操作符
infixr `add` // 默认优先级 20 最高
let add = (a: Int, b: Int) => a + b
assert 1 `add` 2 == 3
assert 1 `add` 2 `add` 3 - 1 == 5
// (((1 `add` 2) `add` 3) - 1) == 5

/**********************《测试 操作符提取成函数》***********************/

let addInt = (_: Int, _: Int)=>Int
let fab = (f: addInt, a: Int, b: Int) => f(a, b)
assert fab(`+` as addInt, 1, 2) == fab((a: Int, b: Int) => a + b, 1, 2)

/**********************《测试 中缀操作符转前缀使用》***********************/

// 语义是提取 fun 调用
// !!! 注意, 右结合操作符转成前缀（提取出来使用）的逻辑目前没处理, 需要依赖 fun 本身处理参数的顺序决定 !!!
// 不过似乎也没啥右结合操作符

assert `-`(1) == -1
assert `-`(1, 2) == 1 - 2
assert `-`(1, 2, 3) == 1 - 2 - 3

assert "Hello" == "Hello"
assert "Hello" ++ " World" == "Hello World"
assert "Hello" ++ " World" ++ "!" == "Hello World!"

assert `++`("Hello") == "Hello"
assert `++`("Hello", " World") == "Hello" ++ " World"
assert `++`("Hello", " World", "!") == "Hello" ++ " World" ++ "!"
assert `<`(1, 2) == 1 < 2


/**********************《测试 局部重载操作符》***********************/
// case 1
{
    // 可以获取到原来的 +
    let prim_plus = `+`
    let + = (a: Int, b: Int) => a - b
    assert 1 + 2 == -1
    assert prim_plus(1, 2) == 3
}
// 作用域外不影响
assert 1 + 2 == 3

// case 2
{
    let + = (a: Int, b: Int) => a * b
    assert 3 + 4 == 12
}
// 离开作用域回复
assert 3 + 4 == 7


/**********************《测试 自定义操作符》***********************/

{
    infixn >..<
    let >..< = (a: Int, b: Int) => a * b
    assert 3 >..< 4 == 12
}
// 离开作用域 >..< 失效
// 3 >..< 4 == 12

{
    infixn >..<
    let >..< = (a: Int, b: Int) => a - b
    assert 3 >..< 4 == -1
    // 同一个作用域不能定义相同符号
    // infixn >..<
}

// 在局部把 - 改成右结合
assert 1 - 2 - 3 == -4
{
    infixr 7 -
    assert 1 - 2 - 3 == 2
}
assert 1 - 2 - 3 == -4


{
    import * from Vectors
    import * from IO
    infixl <<
    // v 没声明类型, 默认 Any
    let << = (vec: Any[], v) => append(vec, v)
    let a: (Int|Str)[] = []
    a << 1 << "2" << 3
    assert  a[0] == 1 && a[1] == "2" && a[2] == 3
    debugger a << 3.14
}

// 类型声明的 `:` parser 特殊处理过, 不受自定义操作符影响
{
    infixn :
    let : = (a: Int, b: Int) => a + b
    let f = (a : Int, b : Int) => a : b
    assert f(1, 2) == 3
}


/***********************************************************/
// 测试内置操作符重新定义  - . = -> =>
{
    // 允许重载 中缀 - 的结合性和优先级
    /*
    infixn -
    infixr -
    infixl -
    */

    // todo 单独用例
    // prefix - // 重复添加
    // infixn = // 重复添加
    // infixr => // 重复添加
    // infixl . // 重复添加

    // todo 自定义时 是否影响原来功能
    /*
    infixn =>
    infixl =>
    infixn .
    infixr .
    infixn ->
    infixl ->
    infixr ->
    */


    let minus = (a: Int) => (b: Int) => (c: Int) => a - b - c
    assert minus(3)(2)(1) == 0

    {
        infixn =>
        let minus = (a: Int) => (b: Int) => (c: Int) => a - b - c
        assert minus(3)(2)(1) == 0
    }
    {
        infixl =>
        let minus = (a: Int) => (b: Int) => (c: Int) => a - b - c
        assert minus(3)(2)(1) == 0
    }

    {
        infixn =>
        let minus = a => b => c => a
        assert minus(3)(2)(1) == 3
    }
    {
        infixl =>
        let minus = a => b => c => a
        assert minus(3)(2)(1) == 3
    }
    // todo 为啥会触发重复添加
    /*{
        infixr =>
        let minus = a => b => c => a
        assert minus(3)(2)(1) == 3
    }*/
}